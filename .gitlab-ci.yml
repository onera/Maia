# Prevent duplicated pipeline by removing MR pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

variables:
  GIT_STRATEGY: none # don't do anything by default
  SCHEDULER_PARAMETERS: "--qos=co_inter_std --ntasks=1 --time=00:15:00" #Slurm default parameters
  SOURCE_CMD: "/scratchm/sonics/dist/spiro_el8.sh --compiler=gcc@12 --mpi=impi --extra=yes"
#Common to all stages
default:
  tags: #All jobs uses jamacar-slurm executor by default (dsi test)
    - slurm
  before_script:
    - module purge
    - source $SOURCE_CMD

stages:
  - init
  - build
  - test
  - deploy

job:init:
  stage: init
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
    - ''
  script: # explicitly load modules one by one, so that if one fails, it will be easy to identify
    - echo "CUSTOM_CI_DIR=$PWD" >> build.env
    - git submodule update --init external/project_utils
    - git submodule update --init external/cpp_cgns
    - git submodule update --init external/std_e
    - git submodule update --init external/pytest-mpi-check
    - git submodule update --init external/paradigm
    - (cd external/paradigm && git submodule update --init extensions/paradigma)
  artifacts:
    reports:
      dotenv: build.env

job:build:
  stage: build
  variables:
    SCHEDULER_PARAMETERS: "--qos=co_inter_std --ntasks=16 --nodes=1-1 --time=00:15:00"
  script:
    - cd $CUSTOM_CI_DIR
    - mkdir -p build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -Dmaia_ENABLE_TESTS=ON -Dmaia_ENABLE_COVERAGE=ON -DPDM_ENABLE_EXTENSION_PDMA=ON ../
    - make -j

# This build documentation after main build, only if branch is dev or for MR events
job:doc:
  stage: build
  needs: ["job:init", "job:build"] #job:init is needed to get dotenv artifacts
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_BRANCH == "dev"
  script:
    - cd $CUSTOM_CI_DIR/build
    - source source.sh
    - cmake -Dmaia_ENABLE_DOCUMENTATION=ON .
    - make maia_sphinx
  artifacts:
    paths:
      - ./build/doc/*
    expire_in: 24 hours


#todo : display reports on browser eg with gitlab pages
job:ctest:
  stage: test
  variables:
    SCHEDULER_PARAMETERS: "--qos=co_inter_std --ntasks=8 --nodes=1-1 --exclusive --time=00:15:00"
  script:
    - cd $CUSTOM_CI_DIR/build
    - ctest -R maia
  after_script:
    # We have to reload modules, because after_script is excuted in a separated shell
    - module purge
    - source $SOURCE_CMD
    - cd build/test
    - coverage combine --rcfile=.coveragerc_unit_tests
    - coverage report --rcfile=.coveragerc_unit_tests
    - coverage xml --rcfile=.coveragerc_unit_tests -o coverage_unit_tests.xml
    - sed 's@'"$CI_PROJECT_DIR"'/@@' -i coverage_unit_tests.xml
  when: on_success # s'exÃ©cutera uniquement si le job `job:build` passe
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - ./build/test/reports/*
    when: always
    # Next allows to display a test tab in the pipeline with report but requires a feature flag to be enabled,
    # see https://docs.gitlab.com/ee/ci/unit_test_reports.html#viewing-unit-test-reports-on-gitlab
    # Use it in combination with --junitxml=reports/pytest-junit.xml in the pytest launcher (TestCreate.cmake)
    reports:
      junit: ./build/test/reports/*_test.xml
      coverage_report:
        coverage_format: cobertura
        path: ./build/test/coverage_unit_tests.xml

job:doc_snippets:
  stage: test
  script:
    - cd $CUSTOM_CI_DIR/build
    - source source.sh; unset PYTEST_PLUGINS
    - python3 -m pytest ../doc

# Deploy the documentation sphinx documentation to the site and pages, only if branch is dev
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  before_script: 
    - ''
  script:
    - cp -r build/doc/sphinx/html public
  artifacts:
    paths:
      - public

job:deploy_spiro_sonics:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
    SCHEDULER_PARAMETERS: "--qos=co_inter_std --ntasks=16 --nodes=1-1 --time=00:30:00"
  before_script: 
    - git submodule update --init
    - (cd external/paradigm && git submodule update --init)
    - mkdir -p build && cd build
    - export PREFIX=/scratchm/jcoulet/aa_install_py3/maia
             FLAGS="-DPDM_ENABLE_EXTENSION_PDMA=ON"
  script:
    - module purge
    - source /scratchm/sonics/dist/spiro_el8.sh --compiler=gcc@12 --mpi=impi
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PREFIX/dbg-impi21 $FLAGS ../
    - make -j install > dbg-impi21.log
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX/opt-impi21 .
    - make -j install > opt-impi21.log

job:deploy_spiro_socle5:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
    - git submodule update --init
    - (cd external/paradigm && git submodule update --init)
    - mkdir -p build && cd build
  script:
    - |
      cat > build_socle5.sh << EOF
      module purge
      module load socle-cfd/5.0-intel2120-impi cmake/3.23.2
      export https_proxy=http://proxy.onera:80
      export PREFIX=/scratchm/jcoulet/aa_install_py3/maia
             FLAGS="-DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CXX_STANDARD=17 -DPDM_ENABLE_EXTENSION_PDMA=ON"
      cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=\$PREFIX/dbg-cfd5_21 \$FLAGS ../
      make -j install > dbg-cfd5_21.log
      cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$PREFIX/opt-cfd5_21 .
      make -j install > opt-cfd5_21.log
      EOF
    - ssh spiro02 "cd $PWD; source /etc/profile; sh ./build_socle5.sh"

job:deploy_sator_sonics:
  stage: deploy
  tags:
    - shell
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
    - git submodule update --init
    - (cd external/paradigm && git submodule update --init)
    - mkdir -p build && cd build
  script:
    - |
      cat > build_sator.sh << EOF
      module purge
      source /tmp_user/sator/sonics/source-intel-oneapi-2021.2-sator-centos8.me --compiler gcc8.3
      export https_proxy=http://proxy.onera:80
      export CC=gcc CXX=g++ FC=gfortran
             PARMETIS_ROOT=/tmp_user/sator/sonics/opt-centos8/gcc-8.3.0/parmetis-4.0.3-pznujngpl3jugn6yi44q364x6jkqugzl
             METIS_ROOT=/tmp_user/sator/sonics/opt-centos8/gcc-8.3.0/metis-5.1.0-ufi2oqocw77dkv6ks36c4jangfxhda5l
             SCOTCH_ROOT=/tmp_user/sator/sonics/opt-centos8/gcc-8.3.0/scotch-6.0.9-4wd3pamq3potrr4qv3frkb45ysrdybqn
      cmake ../ -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=/tmp_user/sator/jcoulet/opt/maia \
                -DCMAKE_CXX_STANDARD=17 \
                -DPDM_ENABLE_LONG_G_NUM=ON -DPDM_ENABLE_EXTENSION_PDMA=ON
      make -j install
      EOF
    - ssh sator6 "cd $PWD; source /etc/profile; sh ./build_sator.sh"
      
job:deploy_sator_socle5:
  stage: deploy
  tags:
    - shell
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
    - git submodule update --init
    - (cd external/paradigm && git submodule update --init)
    - mkdir -p build && cd build
  script:
    - |
      cat > build_sator5.sh << EOF
      module purge
      module load socle-cfd/5.0-intel2120-impi cmake/3.23.2
      export https_proxy=http://proxy.onera:80
      cmake ../ -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=/tmp_user/sator/jcoulet/opt/maia-cfd5_21/ \
                -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CXX_STANDARD=17 \
                -DPDM_ENABLE_LONG_G_NUM=ON -DPDM_ENABLE_EXTENSION_PDMA=ON
      make -j install
      EOF
    - ssh sator "cd $PWD; source /etc/profile; sh ./build_sator5.sh"
      
