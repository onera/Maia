# Prevent duplicated pipeline by removing MR pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

variables:
  GIT_STRATEGY: none # don't do anything by default
  SCHEDULER_PARAMETERS: "--qos=co_short_std --ntasks=1 --time=00:15:00" #Slurm default parameters
  SOURCE_CMD: "/scratchm/sonics/dist/source.sh --env maia --compiler gcc@12 --mpi intel-oneapi"
#Common to all stages
default:
  tags: #All jobs uses jamacar-slurm executor by default (dsi test)
    - slurm
  before_script:
    - module purge
    - source $SOURCE_CMD

stages:
  - init
  - build
  - test
  - deploy

job:init:
  stage: init
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
  script: # explicitly load modules one by one, so that if one fails, it will be easy to identify
    - echo "CUSTOM_CI_DIR=$PWD" >> build.env
    - git submodule update --init external/project_utils
    - git submodule update --init external/cpp_cgns
    - git submodule update --init external/std_e
    - git submodule update --init external/pytest-mpi-check
    - git submodule update --init external/paradigm
    - (cd external/paradigm && git submodule update --init extensions/paradigma)
  artifacts:
    reports:
      dotenv: build.env

job:build:
  stage: build
  variables:
    SCHEDULER_PARAMETERS: "--qos=co_short_std --ntasks=16 --nodes=1-1 --time=00:15:00"
  script:
    - cd $CUSTOM_CI_DIR
    - mkdir -p build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -Dmaia_ENABLE_TESTS=ON -Dmaia_ENABLE_COVERAGE=ON -DPDM_ENABLE_LONG_G_NUM=OFF -DPDM_ENABLE_EXTENSION_PDMA=ON ../
    - make -j

# This build documentation after main build, only if branch is dev or for MR events
job:doc:
  stage: build
  needs: ["job:init", "job:build"] #job:init is needed to get dotenv artifacts
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_BRANCH == "dev"
  script:
    - cd $CUSTOM_CI_DIR/build
    - source source.sh
    - cmake -Dmaia_ENABLE_DOCUMENTATION=ON .
    - make maia_sphinx


#todo : display reports on browser eg with gitlab pages
job:ctest:
  stage: test
  variables:
    SCHEDULER_PARAMETERS: "--qos=co_short_std --ntasks=8 --nodes=1-1 --exclusive --time=00:15:00"
  script:
    - cd $CUSTOM_CI_DIR/build
    - ctest -R maia
  after_script:
    # We have to reload modules, because after_script is excuted in a separated shell
    - module purge
    - source $SOURCE_CMD
    - cd build/test
    - coverage combine --rcfile=.coveragerc_unit_tests
    - coverage report --rcfile=.coveragerc_unit_tests
    - coverage xml --rcfile=.coveragerc_unit_tests -o coverage_unit_tests.xml
    - sed 's@'"$CI_PROJECT_DIR"'/@@' -i coverage_unit_tests.xml
  when: on_success # s'exÃ©cutera uniquement si le job `job:build` passe
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - ./build/test/reports/*
    when: always
    # Next allows to display a test tab in the pipeline with report but requires a feature flag to be enabled,
    # see https://docs.gitlab.com/ee/ci/unit_test_reports.html#viewing-unit-test-reports-on-gitlab
    # Use it in combination with --junitxml=reports/pytest-junit.xml in the pytest launcher (TestCreate.cmake)
    reports:
      junit: ./build/test/reports/*_test.xml
      coverage_report:
        coverage_format: cobertura
        path: ./build/test/coverage_unit_tests.xml

job:doc_snippets:
  stage: test
  script:
    - cd $CUSTOM_CI_DIR/build
    - source source.sh; unset PYTEST_PLUGINS
    - python3 -m pytest ../doc

job:portability_gnum:
  stage: test
  variables:
    SCHEDULER_PARAMETERS: "--qos=co_short_std --ntasks=16 --nodes=1-1 --time=00:15:00"
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_BRANCH == "dev"
  script:
    - cd $CUSTOM_CI_DIR
    - mkdir -p build_int64 && cd build_int64
    - cmake -DCMAKE_BUILD_TYPE=Debug -DPDM_ENABLE_LONG_G_NUM=ON -DPDM_ENABLE_EXTENSION_PDMA=ON ../
    - make -j
    - source source.sh
    - mpirun -np 4 python3 -m pytest ../maia/

job:portability_cfd5:
  stage: test
  variables:
    SCHEDULER_PARAMETERS: "--qos=co_short_std --ntasks=16 --nodes=1-1 --time=00:15:00"
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_BRANCH == "dev"
  before_script: 
    - module purge
    - module load socle-cfd/5.0-intel2120-impi cmake/3.23.2
  script:
    - cd $CUSTOM_CI_DIR
    - mkdir -p build_cfd5 && cd build_cfd5
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug 
                -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CXX_STANDARD=17 
                -DCMAKE_EXE_LINKER_FLAGS='-lz -lbz2' -DCMAKE_SHARED_LINKER_FLAGS='-lz -lbz2'
                -DPDM_ENABLE_LONG_G_NUM=OFF -DPDM_ENABLE_EXTENSION_PDMA=ON
    - make -j
    - source $ELSASPIRO/.env_elsA
    - source source.sh
    - mpirun -np 4 python3 -m pytest ../maia/


# Deploy the documentation sphinx documentation to the site and pages, only if branch is dev
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  before_script: 
    - ''
  script:
    - mkdir public
    - cp -r /scratchm/sonics/usr/maia/v1.0/doc/html public/1.0
    - cp -r /scratchm/sonics/usr/maia/v1.1/doc/html public/1.1
    - cp -r /scratchm/sonics/usr/maia/v1.2/doc/html public/1.2
    - cp -r $CUSTOM_CI_DIR/build/doc/sphinx/html public/dev
    - |
      cat > public/index.html << EOF
      <head>
        <meta http-equiv='refresh' content='0; URL=dev/index.html'>
      </head>
      EOF

  artifacts:
    paths:
      - public

job:init_deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  variables:
    GIT_STRATEGY: clone
  before_script: 
    - git submodule update --init
    - (cd external/paradigm && git submodule update --init)
  script:
    - rsync -a . sonics@spiro02:/scratchm/sonics/tmp/maia-ci-${CI_PIPELINE_ID}
    - rsync -a . sonics@sator:/tmp_user/sator/sonics/tmp/maia-ci-${CI_PIPELINE_ID}
    - rsync -a --delete . sonics@spiro02:/stck/sonics/tmp/maia-ci-dev #This one is for LD8

job:deploy_spiro_socle5:
  stage: deploy
  needs: ["job:init_deploy"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  before_script:
    - |
      cat > build_spiro5.sh << EOF
      module purge
      module load socle-cfd/5.0-intel2120-impi cmake/3.23.2
      export https_proxy=http://proxy.onera:80

      cmake ../ -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_INSTALL_PREFIX=/scratchm/sonics/usr/maia/dev/dsi-cfd5_dbg \
                -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_EXE_LINKER_FLAGS='-lz -lbz2' -DCMAKE_SHARED_LINKER_FLAGS='-lz -lbz2' \
                -DPDM_ENABLE_LONG_G_NUM=OFF -DPDM_ENABLE_EXTENSION_PDMA=ON
      make -j install > dsi-cfd5_dbg.log

      cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/scratchm/sonics/usr/maia/dev/dsi-cfd5
      make -j install > dsi-cfd5.log
      EOF
  script:
    - export JOB_BUILD_DIR=/scratchm/sonics/tmp/maia-ci-${CI_PIPELINE_ID}/build-${CI_JOB_ID}/
    - echo "Build directory is ${JOB_BUILD_DIR}"
    - rsync build_spiro5.sh sonics@spiro02:${JOB_BUILD_DIR}
    - ssh sonics@spiro01 "cd $JOB_BUILD_DIR; source /etc/profile; sh ./build_spiro5.sh"

job:deploy_spiro_sonics:
  stage: deploy
  needs: ["job:init_deploy"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  before_script:
    - |
      cat > build_spiro.sh << EOF
      module purge
      source /scratchm/sonics/dist/source.sh --env maia --compiler gcc@12 --mpi intel-oneapi
      export https_proxy=http://proxy.onera:80
      export PREFIX=/scratchm/sonics/usr/maia/dev
             FLAGS="-DPDM_ENABLE_LONG_G_NUM=OFF -DPDM_ENABLE_EXTENSION_PDMA=ON"
      cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=\$PREFIX/default_dbg \$FLAGS ../
      make -j install > default_dbg.log
      cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$PREFIX/default .
      make -j install > default.log
      EOF
  script:
    - export JOB_BUILD_DIR=/scratchm/sonics/tmp/maia-ci-${CI_PIPELINE_ID}/build-${CI_JOB_ID}/
    - echo "Build directory is ${JOB_BUILD_DIR}"
    - rsync build_spiro.sh sonics@spiro02:${JOB_BUILD_DIR}
    - ssh sonics@spiro02 "cd $JOB_BUILD_DIR; source /etc/profile; sh ./build_spiro.sh"

job:deploy_sator_socle5:
  stage: deploy
  needs: ["job:init_deploy"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  before_script:
    - |
      cat > build_sator5.sh << EOF
      module purge
      module load socle-cfd/5.0-intel2120-impi cmake/3.23.2
      export https_proxy=http://proxy.onera:80
      cmake ../ -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=/tmp_user/sator/sonics/usr/maia/dev/dsi-cfd5 \
                -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_EXE_LINKER_FLAGS='-lz -lbz2' -DCMAKE_SHARED_LINKER_FLAGS='-lz -lbz2' \
                -DPDM_ENABLE_LONG_G_NUM=ON -DPDM_ENABLE_EXTENSION_PDMA=ON
      make -j install > dsi-cfd5.log
      EOF
  script:
    - export JOB_BUILD_DIR=/tmp_user/sator/sonics/tmp/maia-ci-${CI_PIPELINE_ID}/build-${CI_JOB_ID}/
    - echo "Build directory is ${JOB_BUILD_DIR}"
    - rsync build_sator5.sh sonics@sator:${JOB_BUILD_DIR}
    - ssh sonics@sator "cd $JOB_BUILD_DIR; source /etc/profile; sh ./build_sator5.sh"

job:deploy_sator_sonics:
  stage: deploy
  needs: ["job:init_deploy"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  before_script:
    - |
      cat > build_sator.sh << EOF
      source /tmp_user/sator/sonics/dist/source.sh --env maia --compiler gcc@12 --mpi intel-oneapi
      export https_proxy=http://proxy.onera:80
      cmake ../ -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=/tmp_user/sator/sonics/usr/maia/dev/default \
                -DPDM_ENABLE_LONG_G_NUM=ON -DPDM_ENABLE_EXTENSION_PDMA=ON
      make -j install > default.log
      EOF
  script:
    - export JOB_BUILD_DIR=/tmp_user/sator/sonics/tmp/maia-ci-${CI_PIPELINE_ID}/build-${CI_JOB_ID}/
    - echo "Build directory is ${JOB_BUILD_DIR}"
    - rsync build_sator.sh sonics@sator:${JOB_BUILD_DIR}
    - ssh sonics@sator "cd $JOB_BUILD_DIR; source /etc/profile; sh ./build_sator.sh"

job:post_deploy:
  stage: deploy
  needs: ["job:deploy_spiro_socle5", "job:deploy_spiro_sonics", "job:deploy_sator_socle5", "job:deploy_sator_sonics"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - shell
  before_script: 
  script:
    - ssh sonics@spiro02 "rm -rf /scratchm/sonics/tmp/maia-ci-${CI_PIPELINE_ID}"
    - ssh sonics@sator   "rm -rf /tmp_user/sator/sonics/tmp/maia-ci-${CI_PIPELINE_ID}"
